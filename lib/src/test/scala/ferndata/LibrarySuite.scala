/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package ferndata
import java.io.File
import java.nio.file.Files
import java.nio.file.Paths
import java.util.Arrays

import org.apache.hadoop.conf.Configuration
import org.apache.iceberg.hadoop.HadoopFileIO
import org.apache.iceberg.LocationProviders
import org.apache.iceberg.io.FileIO
import org.apache.iceberg.io.LocationProvider
import org.ferndata.index.DataLakeIndex
import scala.collection.mutable.Map
import scala.jdk.CollectionConverters._

import org.scalatest.funsuite.AnyFunSuite
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class LibrarySuite extends AnyFunSuite {
  private def cleanDirectory(direct: String): Unit = {
    val children = new File(direct).list
    if (children != null) {
      children.foreach(fileName => {
        val filePath = direct + File.separator + fileName
        val file = new File(filePath)
        println(s"delete $filePath")
        if (file.isDirectory) {
          cleanDirectory(filePath)
          file.delete
        } else {
          file.delete
        }
      })
    }
  }
  test("someLibraryMethod is always true") {
    cleanDirectory("/tmp/ferndata")

    val conf = new Configuration
    val io:FileIO = new HadoopFileIO(conf)
    val locations:LocationProvider = LocationProviders.locationsFor("file:///tmp/ferndata", Map.empty[String, String].asJava)
    val index = DataLakeIndex(locations, io)
    index.put("one".getBytes, "1".getBytes)
    index.put("two".getBytes, "2".getBytes)
    index.snapshot(1)

    val pathStream = Files.list(Paths.get("/tmp/ferndata", "data"))
    val path = pathStream.findFirst
    assert(path.isPresent)

    val two = index.get("two".getBytes)
    assert(Arrays.compare(two.get, "2".getBytes) == 0)
  }
}
